// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    var hubstaffTaskModel = HubstaffTaskModel.FromJson(jsonString);

using System;
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace HI.SharedKernel.Models
{
    public partial class HsTaskModel
    {
        [JsonProperty("id")]
        public long? Id { get; set; }

        [JsonProperty("integration_id")]
        public long? IntegrationId { get; set; }

        [JsonProperty("summary")]
        public string Summary { get; set; }

        [JsonProperty("details")]
        public string Details { get; set; }

        [JsonProperty("remote_id")]
        public string RemoteId { get; set; }

        [JsonProperty("remote_alternate_id")]
        public string RemoteAlternateId { get; set; }

        [JsonProperty("completed_at")]
        public DateTimeOffset? CompletedAt { get; set; }

        [JsonProperty("status")]
        public string Status { get; set; }

        [JsonProperty("project_id")]
        public long? ProjectId { get; set; }
    }

    public partial class HsTaskModel
    {
        public static HsTaskModel FromJson(string json) => JsonConvert.DeserializeObject<HsTaskModel>(json, HsTaskModelConverter.Settings);
    }

    public static class HubstaffTaskModelSerialize
    {
        public static string ToJson(this HsTaskModel self) => JsonConvert.SerializeObject(self, HsTaskModelConverter.Settings);
    }

    internal static class HsTaskModelConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}