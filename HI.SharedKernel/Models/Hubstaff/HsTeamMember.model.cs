// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using HI.SharedKernel.Models;
//
//    var hsTeamMemberModel = HsTeamMemberModel.FromJson(jsonString);

namespace HI.SharedKernel.Models
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class HsTeamMemberModel
    {
        [JsonProperty("organizations")] public List<HsOrganization> Organizations { get; set; }
    }
    
    public class HsOrganization
    {
        [JsonProperty("id")] 
        public long? Id { get; set; }

        [JsonProperty("name")] 
        public string Name { get; set; }

        /// <summary>
        /// Total task time in seconds
        /// </summary>
        [JsonProperty("duration")] 
        public long? Duration { get; set; }

        [JsonProperty("tasks_duration", NullValueHandling = NullValueHandling.Ignore)]
        public long? TasksDuration { get; set; }

        [JsonProperty("users", NullValueHandling = NullValueHandling.Ignore)]
        public List<HsTeamMemberUser> Users { get; set; } = new List<HsTeamMemberUser>();
    }

    public class HsTeamMemberUser
    {
        [JsonProperty("id")]
        public long? Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("duration")]
        public long? Duration { get; set; }

        [JsonProperty("tasks_duration", NullValueHandling = NullValueHandling.Ignore)]
        public long? TasksDuration { get; set; }

        [JsonProperty("dates", NullValueHandling = NullValueHandling.Ignore)]
        public List<HsTeamMemberDate> Dates { get; set; } = new List<HsTeamMemberDate>();
    }
    
    public class HsTeamMemberDate
    {
        [JsonProperty("date")] 
        public DateTimeOffset? DateDate { get; set; }

        [JsonProperty("duration")] 
        public long? Duration { get; set; }

        [JsonProperty("tasks_duration", NullValueHandling = NullValueHandling.Ignore)]
        public long? TasksDuration { get; set; }

        [JsonProperty("projects")] 
        public List<HsTeamMemberProject> Projects { get; set; } = new List<HsTeamMemberProject>();
    }
    
    public class HsTeamMemberProject
    {
        [JsonProperty("id")]
        public long? Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("duration")]
        public long? Duration { get; set; }

        [JsonProperty("tasks_duration", NullValueHandling = NullValueHandling.Ignore)]
        public long? TasksDuration { get; set; }

        [JsonProperty("tasks", NullValueHandling = NullValueHandling.Ignore)]
        public List<HsTeamMemberTask> Tasks { get; set; } = new List<HsTeamMemberTask>();
    }
    
    public partial class HsTeamMemberTask
    {
        [JsonProperty("id")] 
        public long? Id { get; set; }

        [JsonProperty("summary")] 
        public string Summary { get; set; }

        [JsonProperty("remote_id")] 
        public string RemoteId { get; set; }

        [JsonProperty("remote_alternate_id")] 
        public string RemoteAlternateId { get; set; }

        [JsonProperty("duration")] 
        public long? Duration { get; set; }
    }

    public partial class HsTeamMemberModel
    {
        public static HsTeamMemberModel FromJson(string json) =>
            JsonConvert.DeserializeObject<HsTeamMemberModel>(json,
                HsTeamMemberConverter.Settings);
    }

    public static class HsTeamMemberSerialize
    {
        public static string ToJson(this HsTeamMemberModel self) =>
            JsonConvert.SerializeObject(self, HsTeamMemberConverter.Settings);
    }

    internal static class HsTeamMemberConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter {DateTimeStyles = DateTimeStyles.AssumeUniversal}
            },
        };
    }
}